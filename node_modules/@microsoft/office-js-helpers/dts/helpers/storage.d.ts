import { Dictionary } from './dictionary';
export declare enum StorageType {
    LocalStorage = 0,
    SessionStorage = 1,
}
/**
 * Helper for creating and querying Local Storage or Session Storage.
 * @see Uses {@link Dictionary} to create an in-memory copy of
 * the storage for faster reads. Writes update the actual storage.
 */
export declare class Storage<T> extends Dictionary<T> {
    container: string;
    private _storage;
    static _observers: ((e: StorageEvent) => any)[];
    static _storageEventRegistered: boolean;
    /**
     * @constructor
     * @param {string} container Container name to be created in the LocalStorage.
     * @param {StorageType} type[optional] Storage Type to be used, defaults to Local Storage.
    */
    constructor(container: string, type?: StorageType);
    /**
     * Switch the storage type.
     * Switches the storage type and then reloads the in-memory collection.
     *
     * @type {StorageType} type The desired storage to be used.
     */
    switchStorage(type: StorageType): void;
    /**
     * Add an item.
     * Extends Dictionary's implementation of add, with a save to the storage.
     */
    add(item: string, value: T): T;
    /**
     * Add or Update an item.
     * Extends Dictionary's implementation of insert, with a save to the storage.
     */
    insert(item: string, value: T): T;
    /**
     * Remove an item.
     * Extends Dictionary's implementation with a save to the storage.
     */
    remove(item: string): T;
    /**
     * Clear the storage.
     * Extends Dictionary's implementation with a save to the storage.
     */
    clear(): void;
    /**
     * Clear all storages.
     * Completely clears both the localStorage and sessionStorage.
     */
    static clearAll(): void;
    /**
     * Saves the current state to the storage.
     */
    save(): void;
    /**
     * Refreshes the storage with the current localStorage values.
     */
    load(): void;
    /**
     * Registers an event handler for the window.storage event and
     * triggers the observer when the storage event is fired.
     *
     * The window.storage event is registered only once.
     */
    onStorage(observer: (e: StorageEvent) => any): void;
    private _registerStorageEvent();
    private _notifyObservers;
}
