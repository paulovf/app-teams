// Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license.
"use strict";
/**
 * Constant strings for the host types
 */
exports.HostType = {
    WEB: 'WEB',
    ACCESS: 'ACCESS',
    EXCEL: 'EXCEL',
    ONENOTE: 'ONENOTE',
    OUTLOOK: 'OUTLOOK',
    POWERPOINT: 'POWERPOINT',
    PROJECT: 'PROJECT',
    WORD: 'WORD'
};
/**
 * Constant strings for the host platforms
 */
exports.PlatformType = {
    IOS: 'IOS',
    MAC: 'MAC',
    OFFICE_ONLINE: 'OFFICE_ONLINE',
    PC: 'PC'
};
/*
* Retrieves host info using a workaround that utilizes the internals of the
* Office.js library. Such workarounds should be avoided, as they can lead to
* a break in behavior, if the internals are ever changed. In this case, however,
* Office.js will soon be delivering a new API to provide the host and platform
* information.
*/
function getHostInfo() {
    var host = 'WEB';
    var platform = null;
    var extras = null;
    try {
        if (window.sessionStorage == null) {
            throw new Error("Session Storage isn't supported");
        }
        var hostInfoValue = window.sessionStorage['hostInfoValue'];
        _a = hostInfoValue.split('$'), host = _a[0], platform = _a[1], extras = _a[2];
        // Older hosts used "|", so check for that as well:
        if (extras == null) {
            _b = hostInfoValue.split('|'), host = _b[0], platform = _b[1];
        }
        host = host.toUpperCase() || 'WEB';
        platform = platform.toUpperCase() || null;
    }
    catch (error) {
    }
    return { host: host, platform: platform };
    var _a, _b;
}
;
/**
 * Helper exposing useful Utilities for Office-Addins.
 */
var Utilities = (function () {
    function Utilities() {
    }
    // Underscore.js implementation of extend.
    // https://github.com/jashkenas/underscore/blob/master/underscore.js
    /**
     * Utility to clone or merge objects.
     */
    Utilities.extend = function (dest) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        var length = arguments.length;
        if (length < 2 || dest == null) {
            return dest; // if there are no objects to extend then return the current object
        }
        if (sources) {
            dest = Object(dest); // create a new object to extend if there are any extensions
        }
        for (var index = 1; index < length; index++) {
            var source = arguments[index]; // foreach object
            if (source == null) {
                continue; // move on if the object is null or undefined
            }
            var keys = Object.keys(source), // get all the keys
            l = keys.length; // cache the length
            for (var i = 0; i < l; i++) {
                var key = keys[i]; // for each key
                if (!sources || dest[key] === void 0) {
                    dest[key] = source[key]; // replace values
                }
            }
        }
        return dest;
    };
    ;
    Object.defineProperty(Utilities, "host", {
        /*
         * Returns the current host which is either the name of the application where the
         * Office Add-in is running ("EXCEL", "WORD", etc.) or simply "WEB" for all other platforms.
         * The property is always returned in ALL_CAPS.
         * Note that this property is guranteed to return the correct value ONLY after Office has
         * initialized (i.e., inside, or seqentially after, an Office.initialize = function() { ... }; statement).
         *
         * This code currently uses a workaround that relies on the internals of Office.js.
         * A more robust approach is forthcoming within the official  Office.js library.
         * Once the new approach is released, this implementation will switch to using it
         * instead of the current workaround.
         */
        get: function () {
            var hostInfo = getHostInfo();
            return exports.HostType[hostInfo.host];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Utilities, "platform", {
        /*
        * Returns the host application's platform ("IOS", "MAC", "OFFICE_ONLINE", or "PC").
        * This is only valid for Office Add-ins, and hence returns null if the HostType is WEB.
        * The platform is in ALL-CAPS.
        * Note that this property is guranteed to return the correct value ONLY after Office has
        * initialized (i.e., inside, or seqentially after, an Office.initialize = function() { ... }; statement).
        *
        * This code currently uses a workaround that relies on the internals of Office.js.
        * A more robust approach is forthcoming within the official  Office.js library.
        * Once the new approach is released, this implementation will switch to using it
        * instead of the current workaround.
        */
        get: function () {
            var hostInfo = getHostInfo();
            if (Utilities.host === exports.HostType.WEB) {
                return null;
            }
            var platforms = {
                'IOS': exports.PlatformType.IOS,
                'MAC': exports.PlatformType.MAC,
                'WEB': exports.PlatformType.OFFICE_ONLINE,
                'WIN32': exports.PlatformType.PC
            };
            return platforms[hostInfo.platform] || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Utilities, "isAddin", {
        /**
         * Utility to check if the code is running inside of an add-in.
         */
        get: function () {
            return Utilities.host !== exports.HostType.WEB;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Utility to print prettified errors.
     */
    Utilities.log = function (exception) {
        if (exception == null) {
            console.error(exception);
        }
        else if (typeof exception === 'string') {
            console.error(exception);
        }
        else {
            console.group(exception.message || exception.name || 'Unhandled Exception');
            console.error(exception);
            if ((exception.stack == null)) {
                console.groupCollapsed('Stack Trace');
                console.error(exception.stack);
                console.groupEnd();
            }
            if (window.OfficeExtenstion && exception instanceof OfficeExtension.Error) {
                console.groupCollapsed('Debug Info');
                console.error(exception.debugInfo);
                console.groupEnd();
            }
            console.groupEnd();
        }
    };
    return Utilities;
}());
exports.Utilities = Utilities;
//# sourceMappingURL=utilities.js.map